{"version":3,"file":"_search_-6d478674.js","sources":["../../../../components/icons/Loader.vue","../../../../node_modules/@nuxtjs/algolia/dist/runtime/composables/useAlgoliaRef.mjs","../../../../node_modules/@nuxtjs/algolia/dist/runtime/composables/useAlgoliaInitIndex.mjs","../../../../node_modules/@nuxtjs/algolia/dist/runtime/composables/useAlgoliaSearch.mjs","../../../../pages/search/[search].vue"],"sourcesContent":["<template>\r\n    <svg id=\"loading-spinner\" xmlns=\"http://www.w3.org/2000/svg\" class=\"animate-spin\" viewBox=\"0 0 24 24\" fill=\"none\">\r\n        <path d=\"M12 22C17.5228 22 22 17.5228 22 12H19C19 15.866 15.866 19 12 19V22Z\" fill=\"currentColor\"/>\r\n        <path d=\"M2 12C2 6.47715 6.47715 2 12 2V5C8.13401 5 5 8.13401 5 12H2Z\" fill=\"currentColor\"/>\r\n    </svg>\r\n</template>\r\n\r\n  ","import { useNuxtApp } from \"#imports\";\nexport const useAlgoliaRef = () => {\n  const nuxtApp = useNuxtApp();\n  const algolia = nuxtApp.$algolia;\n  return algolia;\n};\n","import { useAlgoliaRef } from \"./useAlgoliaRef.mjs\";\nexport function useAlgoliaInitIndex(indexName) {\n  const algolia = useAlgoliaRef();\n  const algoliaIndex = algolia?.initIndex(indexName);\n  return algoliaIndex;\n}\n","import { computed } from \"vue\";\nimport { useAlgoliaInitIndex } from \"./useAlgoliaInitIndex.mjs\";\nimport { useState, useRuntimeConfig, useNuxtApp } from \"#imports\";\nexport function useAlgoliaSearch(indexName) {\n  const config = useRuntimeConfig();\n  const index = indexName || config.algolia.globalIndex;\n  if (!index)\n    throw new Error(\"`[@nuxtjs/algolia]` Cannot search in Algolia without `globalIndex` or `indexName` passed as a parameter\");\n  const algoliaIndex = useAlgoliaInitIndex(index);\n  const result = useState(`${index}-search-result`, () => null);\n  const search = async ({ query, requestOptions }) => {\n    if (process.server) {\n      const nuxtApp = useNuxtApp();\n      nuxtApp.$algolia.transporter.requester = (await import(\"@algolia/requester-node-http\").then((lib) => lib.default || lib)).createNodeHttpRequester();\n    }\n    const searchResult = await algoliaIndex.search(query, requestOptions);\n    result.value = searchResult;\n    return searchResult;\n  };\n  return {\n    result: computed(() => result.value),\n    search\n  };\n}\n","<template>\r\n    <div>\r\n        <HelpersHeading tag=\"h1\" tagStyle=\"h1\" color=\"blue\">\r\n            <span v-if=\"results.total\">{{ $t('pages.search.title') }}</span>\r\n            <span v-else>{{ $t('pages.search.noResults') }}</span>\r\n            &nbsp;\r\n            <span class=\"italic font-semibold\">{{ customSearch }}</span>\r\n        </HelpersHeading>\r\n        <Transition name=\"fade\">\r\n            <div v-if=\"!resultsLoaded\"\r\n                class=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 text-trso-blue\">\r\n                <IconsLoader class=\"w-16 h-16\"/>\r\n            </div>\r\n        </Transition>\r\n        <Transition name=\"fade\">\r\n        <div v-if=\"resultsLoaded\">\r\n            <div v-if=\"results.total\"><!--class=\"min-h-[1500px]\"-->\r\n                <ul class=\"mb-4 lg:mb-8\">\r\n                    <li v-for=\"result in results.hits\" :key=\"result.id\">\r\n                        <NuxtLink :to=\"localePath({ name: 'type-id-slug', params: { type: result.type === 'series' ? 'tv-series' : 'movies', id: result.objectID, slug: `${result['slug_' + locale]}`} })\"\r\n                                :title=\"result['title_' + locale]\"\r\n                                class=\"flex items-center gap-x-4 lg:gap-x-8\r\n                                        transition-colors duration-500 bg-white hover:bg-trso-blue2\r\n                                        text-trso-blue hover:text-white text-base lg:text-lg text-left\r\n                                        p-2 lg:p-4\">\r\n                            <img :src=\"result.poster\" :alt=\"`poster ${result['title_' + locale]}`\"\r\n                                 class=\"w-12 h-auto\">\r\n                            <span>{{ result['title_' + locale] }} <span v-if=\"result.director.length\" class=\"text-base\">({{ result.director }})</span></span>\r\n                        </NuxtLink>\r\n                    </li>\r\n                </ul>\r\n                <HelpersButton v-if=\"results.count < results.max\" \r\n                            color=\"blue\" \r\n                            @click=\"loadMore()\" \r\n                            :disabled=\"loadMoreState\"\r\n                            class=\"text-white\">\r\n                    <span v-if=\"!loadMoreState\">{{ $t('loadMore') }}</span>\r\n                    <i v-else><IconsLoader class=\"w-4 h-4\" /></i>\r\n                </HelpersButton>\r\n                <span v-else class=\"block px-4 py-2 text-trso-blue text-center border border-trso-blue\">\r\n                    {{ $t('pages.search.noMore') }}\r\n                </span>\r\n            </div>\r\n            <div v-else>\r\n                <p class=\"text-lg text-center font-sans text-trso-yellow mb-8\">\r\n                    <NuxtLink :to=\"localePath({ name: 'type-pages-page', params: { type: 'tv-series', page: 1 } })\" \r\n                                :title=\"$t('header.series')\"\r\n                                class=\"flex items-center gap-x-2\">\r\n                        <i><IconsArrowRight class=\"h-5 w-5\"/></i>\r\n                        <span>{{ $t('pages.search.seriesList') }}</span>\r\n                    </NuxtLink>\r\n                </p>  \r\n                <p class=\"text-lg text-center font-sans text-trso-blue mb-8\">\r\n                    <NuxtLink :to=\"localePath({ name: 'type-pages-page', params: { type: 'movies', page: 1 } })\" \r\n                                :title=\"$t('header.series')\"\r\n                                class=\"flex items-center gap-x-2\">\r\n                        <i><IconsArrowRight class=\"h-5 w-5\"/></i>\r\n                        <span>{{ $t('pages.search.moviesList') }}</span>\r\n                    </NuxtLink>\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </Transition>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\n\r\nconst { locale } = useI18n()\r\n\r\nconst localePath = useLocalePath()\r\n\r\nconst route = useRoute()\r\n\r\nconst customSearch = route.params.search\r\n\r\nconst { result, search } = useAlgoliaSearch('movies')\r\n\r\nconst page = ref(0)\r\n\r\nconst loadMoreState = ref(false)\r\n\r\nconst hitsPerPage = 4\r\n\r\nconst max = 50\r\n\r\nconst resultsLoaded = ref(false)\r\n\r\nconst results = reactive({\r\n    hits: [],\r\n    count: 0,\r\n    total: 0,\r\n    max: 0\r\n})\r\n\r\nonMounted(() => {\r\n\r\n    loadResult()\r\n\r\n})\r\n\r\nasync function loadMore () {\r\n\r\n    loadMoreState.value = true\r\n\r\n    try {\r\n\r\n        await loadResult()\r\n\r\n        page.value++\r\n\r\n        \r\n    } catch (error) {\r\n        \r\n    }\r\n    \r\n    loadMoreState.value = false\r\n\r\n}\r\n\r\nasync function loadResult () {\r\n\r\n    resultsLoaded.value = true\r\n\r\n    const res = await search({ query: `${String(customSearch)}`, requestOptions: { hitsPerPage: hitsPerPage, page: page.value } })\r\n\r\n    results.hits = [...results.hits, ...res.hits]\r\n\r\n    results.count = results.hits.length\r\n\r\n    results.total = res.nbHits\r\n\r\n    results.max = res.nbHits < max ? res.nbHits : max\r\n\r\n    resultsLoaded.value = true\r\n\r\n}\r\n\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n  transition: opacity 2s ease;\r\n}\r\n\r\n.fade-enter-from,\r\n.fade-leave-to {\r\n  opacity: 0;\r\n}\r\n\r\n</style>"],"names":["_ssrRenderAttrs","_mergeProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AACS,QAAG,OAAiBA,eAAAC,WAAA;AAAA,IAAC,IAAA;AAAA,IAAmC,OAAM;AAAA,IAAe,OAAO;AAAA,IAAa,SAAW;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACArH,MAAA,gBAAA,MAAA;AACA,QAAA,UAAA;AACA,QAAA,UAAA,QAAA;AACA,SAAA;AACA;ACJO,SAAS,oBAAoB,WAAW;AAC7C,QAAM,UAAU;AAChB,QAAM,eAAe,mCAAS,UAAU;AACxC,SAAO;AACT;ACFA,SAAA,iBAAA,WAAA;AACA,QAAA,SAAA;AACA,QAAA,QAAA,aAAA,OAAA,QAAA;AACA,MAAA,CAAA;AACA,UAAA,IAAA,MAAA,yGAAA;AACA,QAAA,eAAA,oBAAA,KAAA;AACA,QAAA,SAAA,SAAA,GAAA,uBAAA,MAAA,IAAA;AACA,QAAA,SAAA,OAAA,EAAA,OAAA,eAAA,MAAA;AACA;AACA,YAAA,UAAA;AACA,cAAA,SAAA,YAAA,aAAA,MAAA,OAAA,8BAAA,EAAA,KAAA,CAAA,QAAA,IAAA,WAAA,GAAA,GAAA,wBAAA;AAAA,IACA;AACA,UAAA,eAAA,MAAA,aAAA,OAAA,OAAA,cAAA;AACA,WAAA,QAAA;AACA,WAAA;AAAA,EACA;AACA,SAAA;AAAA,IACA,QAAA,SAAA,MAAA,OAAA,KAAA;AAAA,IACA;AAAA,EACA;AACA;;;;;;AC6CA,UAAA,EAAA,OAAA,IAAA,QAAA;AAEA,UAAA,aAAA,cAAA;AAEA,UAAA,QAAA,SAAA;AAEA,UAAA,eAAA,MAAA,OAAA;AAEA,UAAA,EAAA,QAAA,WAAA,iBAAA,QAAA;AAEA,UAAA,OAAA,IAAA,CAAA;AAEA,UAAA,gBAAA,IAAA,KAAA;AAEA,UAAA,cAAA;AAEA,UAAA,MAAA;AAEA,UAAA,gBAAA,IAAA,KAAA;AAEA,UAAA,UAAA,SAAA;AAAA,MACA,MAAA,CAAA;AAAA,MACA,OAAA;AAAA,MACA,OAAA;AAAA,MACA,KAAA;AAAA,IACA,CAAA;AAQA,mBAAA,WAAA;AAEA,oBAAA,QAAA;AAEA,UAAA;AAEA,cAAA,WAAA;AAEA,aAAA;AAAA,MAGA,SAAA,OAAA;AAAA,MAEA;AAEA,oBAAA,QAAA;AAAA,IAEA;AAEA,mBAAA,aAAA;AAEA,oBAAA,QAAA;AAEA,YAAA,MAAA,MAAA,OAAA,EAAA,OAAA,GAAA,OAAA,YAAA,KAAA,gBAAA,EAAA,aAAA,MAAA,KAAA,MAAA,GAAA;AAEA,cAAA,OAAA,CAAA,GAAA,QAAA,MAAA,GAAA,IAAA,IAAA;AAEA,cAAA,QAAA,QAAA,KAAA;AAEA,cAAA,QAAA,IAAA;AAEA,cAAA,MAAA,IAAA,SAAA,MAAA,IAAA,SAAA;AAEA,oBAAA,QAAA;AAAA,IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}