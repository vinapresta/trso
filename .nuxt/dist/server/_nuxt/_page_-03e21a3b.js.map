{"version":3,"file":"_page_-03e21a3b.js","sources":["../../../../components/icons/ChevronLeft.vue","../../../../components/pages/List/Pagination.vue","../../../../components/pages/List/ItemsByPage.vue","../../../../pages/[type]/pages/[page].vue"],"sourcesContent":["<template>\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 19.5L8.25 12l7.5-7.5\" />\r\n    </svg>\r\n</template>","<template>\r\n    <nav class=\"py-4\">\r\n        <ul class=\"flex flex-wrap items-center justify-center text-sm lg:text-base\">\r\n            <li v-if=\"page > 1\" \r\n                class=\"mx-1 my-2  \">\r\n                <NuxtLink class=\"text-white font-bold h-8 w-8 flex items-center justify-center\"\r\n                          :class=\"color === 'blue' ? 'bg-trso-blue hover:bg-trso-blue2' : 'bg-trso-yellow hover:bg-trso-yellow2'\"\r\n                          :to=\"localePath({ name: routeName, params: { page: page - 1 } })\">\r\n                    <IconsChevronLeft class=\"h-4 w-4\" />\r\n                </NuxtLink>\r\n            </li>\r\n            <li class=\"pagination-first mx-1 my-2\">\r\n                <NuxtLink class=\"block text-white font-bold h-8 w-8 flex items-center justify-center\"\r\n                          :class=\"page != 1 ? colorClasses : colorClassesActive\"\r\n                          :to=\"localePath({ name: routeName, params: { page: 1 } })\" >\r\n                    1\r\n                </NuxtLink>\r\n            </li>\r\n            <li v-if=\"page > MAX_PAGES\" \r\n                class=\"mx-1 my-2\">\r\n                <span class=\"block font-bold h-8 w-auto flex items-center justify-center\"\r\n                      :class=\"color === 'blue' ? 'text-trso-blue' : 'text-trso-yellow'\">\r\n                    ...\r\n                </span>\r\n            </li>\r\n            <li class=\"mx-1 my-2\"\r\n                v-for=\"displayedPage in pagination\" \r\n                :key=\"displayedPage.id\">\r\n                <NuxtLink class=\"block text-white font-bold h-8 w-8 flex items-center justify-center\"\r\n                          :class=\"displayedPage != page ? colorClasses : colorClassesActive\"\r\n                          :to=\"localePath({ name: routeName, params: { page: displayedPage } })\">\r\n                    {{ displayedPage }}\r\n                </NuxtLink>\r\n            </li>\r\n            <li v-if=\"page < pagesCount - MAX_PAGES\" \r\n                class=\"mx-1 my-2\">\r\n                <span class=\"block font-bold h-8 w-auto flex items-center justify-center\"\r\n                      :class=\"color === 'blue' ? 'text-trso-blue' : 'text-trso-yellow'\">\r\n                    ...\r\n                </span>\r\n            </li>\r\n            <li class=\"pagination-last mx-1 my-2\">\r\n                <NuxtLink class=\"block text-white font-bold h-8 w-8 flex items-center justify-center\"\r\n                          :class=\"page != pagesCount ? colorClasses : colorClassesActive\" \r\n                          :to=\"localePath({ name: routeName, params: { page: pagesCount } })\">\r\n                    {{ pagesCount }}\r\n                </NuxtLink>\r\n            </li>\r\n            <li v-if=\"page < pagesCount\" \r\n                class=\"mx-1 my-2\">\r\n                <nuxt-link class=\"block text-white font-bold h-8 w-8 flex items-center justify-center\"\r\n                           :class=\"color === 'blue' ? 'bg-trso-blue hover:bg-trso-blue2' : 'bg-trso-yellow hover:bg-trso-yellow2'\"\r\n                           :to=\"localePath({ name: routeName, params: { page: page + 1 } })\">\r\n                    <IconsChevronRight class=\"h-4 w-4\" />\r\n                </nuxt-link>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n</template>\r\n\r\n<script setup>\r\n\r\n    const props = defineProps({\r\n        pagesCount: Number,\r\n        page: Number,\r\n        routeName: String,\r\n        color: String\r\n    })\r\n\r\n    const MAX_PAGES = 3\r\n\r\n    const localePath = useLocalePath()\r\n\r\n    const isFirst = ref()\r\n\r\n    const isLast = ref()\r\n\r\n    const isCurrent = (n) => {\r\n\r\n        return (parseInt(n) === parseInt(props.page))\r\n\r\n    }\r\n\r\n    const colorClasses = computed(() => {\r\n\r\n       return props.color === 'blue' ? 'bg-trso-blue hover:bg-trso-blue2' : 'bg-trso-yellow hover:bg-trso-yellow2'\r\n\r\n    })\r\n\r\n    const colorClassesActive = computed(() => {\r\n\r\n        return props.color === 'blue' ? 'bg-trso-blue2' : 'bg-trso-yellow2'\r\n\r\n    })\r\n\r\n    const pagination = computed(() => {\r\n\r\n        const page = props.page\r\n        const pagesCount = props.pagesCount\r\n\r\n        if(pagesCount > MAX_PAGES) {\r\n\r\n            if (page <= MAX_PAGES)\r\n                return Array.from({length: MAX_PAGES}, (v, i) => i + 2)\r\n\r\n            if (page > pagesCount - MAX_PAGES)\r\n                return Array.from({length: MAX_PAGES}, (v, i) => (pagesCount -1) - i).reverse()\r\n\r\n            return [page - 1, page, page + 1]\r\n\r\n        } else {\r\n\r\n            const pagesArray = Array.from({length: MAX_PAGES}, (v, i) => i + 1)\r\n\r\n            return pagesArray.slice(1,-1).splice(0, pagesArray.length - 1)\r\n\r\n        }\r\n\r\n    })\r\n\r\n\r\n</script>\r\n","<template>\r\n    <div>\r\n        <PagesListPagination :page=\"page\" \r\n                             :pagesCount=\"pagesCount\" \r\n                             :routeName=\"routeName\" \r\n                             :color=\"color\"/>\r\n        <div class=\"container grid grid-cols-1 lg:grid-cols-2 gap-x-4 gap-y-4\">\r\n            <PagesItem v-for=\"item in items\" \r\n                       :key=\"item.id\" \r\n                       :itemData=\"item\" \r\n                       :type=\"type\" \r\n                       :lang=\"locale\" \r\n                       :color=\"color\" />\r\n        </div>\r\n        <PagesListPagination :page=\"page\" \r\n                             :pagesCount=\"pagesCount\" \r\n                             :routeName=\"routeName\" \r\n                             :color=\"color\"/>\r\n    </div>\r\n    \r\n</template>\r\n\r\n<script setup>\r\n\r\nconst props = defineProps ({\r\n    items: Array,\r\n    type: String,\r\n    page: Number,\r\n    routeName: String,\r\n    color: String,\r\n    pagesCount: Number\r\n})\r\n\r\nconst { locale } = useI18n()\r\n\r\nonMounted(() => {\r\n\r\n    const itemElements = Array.from(document.getElementsByClassName('fade-in'))\r\n\r\n    const observer = new IntersectionObserver(entries => {\r\n\r\n        entries.forEach(entry => {\r\n\r\n            const intersecting = entry.isIntersecting\r\n\r\n            if (intersecting) {\r\n\r\n                entry.target.style.opacity = '1'\r\n                entry.target.style.transform = 'scale(1)'\r\n                \r\n                observer.unobserve(entry.target);\r\n            }\r\n\r\n        })\r\n    }, \r\n    { threshold: 0.5 })\r\n\r\n    itemElements.forEach(item => {\r\n\r\n        observer.observe(item)\r\n    })\r\n\r\n})\r\n\r\n</script>","<template>\r\n    <div>\r\n        <LayoutBreadcrumbs :levels=\"[ { name: type, route: { name: 'type-pages-page', params: { type: type, page: 1 } } }, { name: `page ${String(page)}` }]\"/>\r\n        <HelpersHeading tag=\"h1\" \r\n                        tagStyle=\"h1\" \r\n                        :color=\"color\">\r\n            {{  titleInner }}\r\n        </HelpersHeading>\r\n        <PagesListItemsByPage :items=\"items.data\"\r\n                              :type=\"type\" \r\n                              :page=\"page\" \r\n                              routeName=\"type-pages-page\"\r\n                              :color=\"color\"\r\n                              :pagesCount=\"pagesCount\" />\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\n\r\nconst runtimeConfig = useRuntimeConfig()\r\n\r\nconst route = useRoute()\r\n\r\nconst { locale, t } = useI18n()\r\n\r\nconst page = parseInt(route.params.page)\r\n\r\nconst type = route.params.type\r\n\r\nconst color = type === 'tv-series' ? 'yellow' : 'blue'\r\n\r\nconst titleInner = type === 'tv-series' ? t('pages.series.title') : t('pages.movies.title')\r\n\r\nconst limitByPage = runtimeConfig.public.limitByPage\r\n\r\nconst start = (page - 1) * parseInt(limitByPage)\r\n\r\nconst fields = `fields[0]=director&fields[1]=year&fields[2]=poster`\r\nconst filters = `filters[type][$eq]=${type === 'tv-series' ? 'series' : 'movie'}&filters[item_lang][locale][$eq]=${locale.value}&filters[books][firstBook][$eq]=true`\r\nconst populate = `populate[item_lang][fields][0]=title&populate[item_lang][fields][1]=slug&populate[books][fields][0]=title&populate[books][fields][1]=authors&populate[books][fields][2]=thumbnail`\r\nconst pagination = `pagination[start]=${start}&pagination[limit]=${limitByPage}`\r\nconst sort = `sort[0]=id%3Adesc`\r\nconst params = `${sort}&${fields}&${filters}&${populate}&${pagination}`\r\nconst url = `${runtimeConfig.public.API_BASE_URL}items?${params}`\r\n\r\nconst { data: items } = await useFetch(url)\r\n\r\nconst pagesCount = computed(() => {\r\n\r\n    const total =  items.value.meta.pagination.total\r\n\r\n    return Math.ceil( parseInt(total) / parseInt(limitByPage))\r\n\r\n})\r\n\r\nconst headLinks = computed(() => {\r\n\r\n    let links = [{ rel: 'canonical', href: `${runtimeConfig.public.BASE_URL}${route.fullPath}` }]\r\n\r\n    if (pagesCount.value > 1) {\r\n\r\n        if (page === 1) {\r\n\r\n            links.push({ rel: 'next', href: `${runtimeConfig.public.BASE_URL}/${type}/pages/2` })\r\n\r\n        } else if(page === pagesCount.value) {\r\n\r\n            links.push({ rel: 'prev', href: `${runtimeConfig.public.BASE_URL}/${type}/pages/${page - 1}` })\r\n\r\n        } else {\r\n\r\n            links.push({ rel: 'prev', href: `${runtimeConfig.public.BASE_URL}/${type}/pages/${page - 1}` })\r\n            links.push({ rel: 'next', href: `${runtimeConfig.public.BASE_URL}/${type}/pages/${page + 1}` })\r\n\r\n        }\r\n    }\r\n\r\n    return links\r\n})\r\n\r\nlet metaType = type === 'tv-series' ? 'series' : 'movies'\r\n\r\nconst titleType = t(`pages['${metaType}']['title']`)\r\nconst title = `${titleType} - page ${page}`\r\nconst hidDescription = t(`pages['${metaType}']['hidDescription']`)\r\nconst hidKeywords = t(`pages['${metaType}']['hidKeywords']`)\r\nconst hidOgDescription = t(`pages['${metaType}']['hidOgDescription']`)\r\nconst hidTwitterTitle = t(`pages['${metaType}']['hidTwitterTitle']`)\r\nconst hidTwitterDescription = t(`pages['${metaType}']['hidTwitterDescription']`)\r\n\r\nuseHead({\r\n    title: `${runtimeConfig.public.websiteName} - ${title}`,\r\n    link: headLinks.value,\r\n    meta: [\r\n        { name: 'description', content: `${hidDescription} ${page}` },\r\n        { name: 'keywords', content: hidKeywords },\r\n        { property: 'og:site_name', content: runtimeConfig.public.websiteName },\r\n        { property: 'og:description', content: `${hidOgDescription} ${page}` },\r\n        { property: 'twitter:title', content: `${runtimeConfig.public.websiteName} - ${hidTwitterTitle}` },\r\n        { property: 'twitter:description', content: `${hidTwitterDescription} ${page}` }\r\n    ]\r\n\r\n})\r\n\r\n</script>"],"names":["_ssrRenderAttrs","_mergeProps"],"mappings":"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"}