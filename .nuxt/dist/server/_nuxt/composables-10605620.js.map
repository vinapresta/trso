{"version":3,"file":"composables-10605620.js","sources":["../../../../node_modules/@nuxtjs/i18n/dist/runtime/composables.mjs"],"sourcesContent":["import { findBrowserLocale, getComposer } from \"vue-i18n-routing\";\nimport { useRoute, useRouter, useRequestHeaders, useCookie as _useCookie, useNuxtApp } from \"#imports\";\nimport { parseAcceptLanguage } from \"#build/i18n.internal.mjs\";\nimport { nuxtI18nInternalOptions, nuxtI18nOptionsDefault, localeCodes as _localeCodes } from \"#build/i18n.options.mjs\";\nimport {\n  useRouteBaseName as _useRouteBaseName,\n  useLocalePath as _useLocalePath,\n  useLocaleRoute as _useLocaleRoute,\n  useSwitchLocalePath as _useSwitchLocalePath,\n  useLocaleHead as _useLocaleHead\n} from \"vue-i18n-routing\";\nexport * from \"vue-i18n\";\nexport function useRouteBaseName(route = useRoute()) {\n  const router = useRouter();\n  return _useRouteBaseName(route, { router });\n}\nexport function useLocalePath(options = {}) {\n  const i18n = options.i18n || getComposer(useNuxtApp().$i18n);\n  const route = useRoute();\n  const router = useRouter();\n  return _useLocalePath({\n    router,\n    route,\n    i18n\n  });\n}\nexport function useLocaleRoute(options = {}) {\n  const i18n = options.i18n || getComposer(useNuxtApp().$i18n);\n  const route = useRoute();\n  const router = useRouter();\n  return _useLocaleRoute({\n    router,\n    route,\n    i18n\n  });\n}\nexport function useSwitchLocalePath(options = {}) {\n  const i18n = options.i18n || getComposer(useNuxtApp().$i18n);\n  const route = useRoute();\n  const router = useRouter();\n  return _useSwitchLocalePath({\n    router,\n    route,\n    i18n\n  });\n}\nexport function useLocaleHead(options = {\n  addDirAttribute: false,\n  addSeoAttributes: false,\n  identifierAttribute: \"hid\"\n}) {\n  const { addDirAttribute, addSeoAttributes, identifierAttribute } = options;\n  const i18n = options.i18n || getComposer(useNuxtApp().$i18n);\n  const route = useRoute();\n  const router = useRouter();\n  return _useLocaleHead({\n    addDirAttribute,\n    addSeoAttributes,\n    identifierAttribute,\n    router,\n    route,\n    i18n\n  });\n}\nexport function useBrowserLocale(normalizedLocales = nuxtI18nInternalOptions.__normalizedLocales) {\n  const headers = useRequestHeaders([\"accept-language\"]);\n  return findBrowserLocale(\n    normalizedLocales,\n    process.client ? navigator.languages : parseAcceptLanguage(headers[\"accept-language\"] || \"\")\n  ) || null;\n}\nexport function useCookieLocale({\n  useCookie = nuxtI18nOptionsDefault.detectBrowserLanguage.useCookie,\n  cookieKey = nuxtI18nOptionsDefault.detectBrowserLanguage.cookieKey,\n  localeCodes = _localeCodes\n}) {\n  const locale = ref(\"\");\n  if (useCookie) {\n    let code = null;\n    if (process.client) {\n      const cookie = _useCookie(cookieKey);\n      code = cookie.value;\n    } else if (process.server) {\n      const cookie = useRequestHeaders([\"cookie\"]);\n      code = cookie[cookieKey];\n    }\n    if (code && localeCodes.includes(code)) {\n      locale.value = code;\n    }\n  }\n  return locale;\n}\nconst warnRuntimeUsage = (method) => console.warn(\n  method + \"() is a compiler-hint helper that is only usable inside the script block of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.\"\n);\nexport function defineI18nRoute(route) {\n  if (process.dev) {\n    warnRuntimeUsage(\"defineI18nRoute\");\n  }\n}\n"],"names":["_useRouteBaseName","_useLocalePath"],"mappings":";;;;;AAYA,SAAA,iBAAA,QAAA,YAAA;AACA,QAAA,SAAA;AACA,SAAAA,mBAAA,OAAA,EAAA,OAAA,CAAA;AACA;AACA,SAAA,cAAA,UAAA,IAAA;AACA,QAAA,OAAA,QAAA,QAAA,YAAA,WAAA,EAAA,KAAA;AACA,QAAA,QAAA;AACA,QAAA,SAAA;AACA,SAAAC,gBAAA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACA,CAAA;AACA;"}